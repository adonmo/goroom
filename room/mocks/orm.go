// Code generated by MockGen. DO NOT EDIT.
// Source: room/orm.go

// Package mocks is a generated GoMock package.
package mocks

import (
	room "adonmo.com/goroom/room"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockORM is a mock of ORM interface
type MockORM struct {
	ctrl     *gomock.Controller
	recorder *MockORMMockRecorder
}

// MockORMMockRecorder is the mock recorder for MockORM
type MockORMMockRecorder struct {
	mock *MockORM
}

// NewMockORM creates a new mock instance
func NewMockORM(ctrl *gomock.Controller) *MockORM {
	mock := &MockORM{ctrl: ctrl}
	mock.recorder = &MockORMMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockORM) EXPECT() *MockORMMockRecorder {
	return m.recorder
}

// HasTable mocks base method
func (m *MockORM) HasTable(entity interface{}) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasTable", entity)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasTable indicates an expected call of HasTable
func (mr *MockORMMockRecorder) HasTable(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasTable", reflect.TypeOf((*MockORM)(nil).HasTable), entity)
}

// CreateTable mocks base method
func (m *MockORM) CreateTable(models ...interface{}) room.Result {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range models {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateTable", varargs...)
	ret0, _ := ret[0].(room.Result)
	return ret0
}

// CreateTable indicates an expected call of CreateTable
func (mr *MockORMMockRecorder) CreateTable(models ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTable", reflect.TypeOf((*MockORM)(nil).CreateTable), models...)
}

// TruncateTable mocks base method
func (m *MockORM) TruncateTable(entity interface{}) room.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TruncateTable", entity)
	ret0, _ := ret[0].(room.Result)
	return ret0
}

// TruncateTable indicates an expected call of TruncateTable
func (mr *MockORMMockRecorder) TruncateTable(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TruncateTable", reflect.TypeOf((*MockORM)(nil).TruncateTable), entity)
}

// Create mocks base method
func (m *MockORM) Create(entity interface{}) room.Result {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", entity)
	ret0, _ := ret[0].(room.Result)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockORMMockRecorder) Create(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockORM)(nil).Create), entity)
}

// DropTable mocks base method
func (m *MockORM) DropTable(entities ...interface{}) room.Result {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range entities {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DropTable", varargs...)
	ret0, _ := ret[0].(room.Result)
	return ret0
}

// DropTable indicates an expected call of DropTable
func (mr *MockORMMockRecorder) DropTable(entities ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DropTable", reflect.TypeOf((*MockORM)(nil).DropTable), entities...)
}

// GetModelDefinition mocks base method
func (m *MockORM) GetModelDefinition(entity interface{}) room.ModelDefinition {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetModelDefinition", entity)
	ret0, _ := ret[0].(room.ModelDefinition)
	return ret0
}

// GetModelDefinition indicates an expected call of GetModelDefinition
func (mr *MockORMMockRecorder) GetModelDefinition(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetModelDefinition", reflect.TypeOf((*MockORM)(nil).GetModelDefinition), entity)
}

// GetUnderlyingORM mocks base method
func (m *MockORM) GetUnderlyingORM() interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUnderlyingORM")
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetUnderlyingORM indicates an expected call of GetUnderlyingORM
func (mr *MockORMMockRecorder) GetUnderlyingORM() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUnderlyingORM", reflect.TypeOf((*MockORM)(nil).GetUnderlyingORM))
}

// GetLatestSchemaIdentityHashAndVersion mocks base method
func (m *MockORM) GetLatestSchemaIdentityHashAndVersion() (string, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestSchemaIdentityHashAndVersion")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetLatestSchemaIdentityHashAndVersion indicates an expected call of GetLatestSchemaIdentityHashAndVersion
func (mr *MockORMMockRecorder) GetLatestSchemaIdentityHashAndVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestSchemaIdentityHashAndVersion", reflect.TypeOf((*MockORM)(nil).GetLatestSchemaIdentityHashAndVersion))
}

// DoInTransaction mocks base method
func (m *MockORM) DoInTransaction(fc func(room.ORM) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoInTransaction", fc)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoInTransaction indicates an expected call of DoInTransaction
func (mr *MockORMMockRecorder) DoInTransaction(fc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoInTransaction", reflect.TypeOf((*MockORM)(nil).DoInTransaction), fc)
}

// MockIdentityHashCalculator is a mock of IdentityHashCalculator interface
type MockIdentityHashCalculator struct {
	ctrl     *gomock.Controller
	recorder *MockIdentityHashCalculatorMockRecorder
}

// MockIdentityHashCalculatorMockRecorder is the mock recorder for MockIdentityHashCalculator
type MockIdentityHashCalculatorMockRecorder struct {
	mock *MockIdentityHashCalculator
}

// NewMockIdentityHashCalculator creates a new mock instance
func NewMockIdentityHashCalculator(ctrl *gomock.Controller) *MockIdentityHashCalculator {
	mock := &MockIdentityHashCalculator{ctrl: ctrl}
	mock.recorder = &MockIdentityHashCalculatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIdentityHashCalculator) EXPECT() *MockIdentityHashCalculatorMockRecorder {
	return m.recorder
}

// ConstructHash mocks base method
func (m *MockIdentityHashCalculator) ConstructHash(entityModel interface{}) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConstructHash", entityModel)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConstructHash indicates an expected call of ConstructHash
func (mr *MockIdentityHashCalculatorMockRecorder) ConstructHash(entityModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConstructHash", reflect.TypeOf((*MockIdentityHashCalculator)(nil).ConstructHash), entityModel)
}
