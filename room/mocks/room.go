// Code generated by MockGen. DO NOT EDIT.
// Source: room/room.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockInitializer is a mock of Initializer interface
type MockInitializer struct {
	ctrl     *gomock.Controller
	recorder *MockInitializerMockRecorder
}

// MockInitializerMockRecorder is the mock recorder for MockInitializer
type MockInitializerMockRecorder struct {
	mock *MockInitializer
}

// NewMockInitializer creates a new mock instance
func NewMockInitializer(ctrl *gomock.Controller) *MockInitializer {
	mock := &MockInitializer{ctrl: ctrl}
	mock.recorder = &MockInitializerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInitializer) EXPECT() *MockInitializerMockRecorder {
	return m.recorder
}

// Init mocks base method
func (m *MockInitializer) Init(currentIdentityHash string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Init", currentIdentityHash)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Init indicates an expected call of Init
func (mr *MockInitializerMockRecorder) Init(currentIdentityHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Init", reflect.TypeOf((*MockInitializer)(nil).Init), currentIdentityHash)
}

// CalculateIdentityHash mocks base method
func (m *MockInitializer) CalculateIdentityHash() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CalculateIdentityHash")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CalculateIdentityHash indicates an expected call of CalculateIdentityHash
func (mr *MockInitializerMockRecorder) CalculateIdentityHash() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CalculateIdentityHash", reflect.TypeOf((*MockInitializer)(nil).CalculateIdentityHash))
}

// PerformDBCleanUp mocks base method
func (m *MockInitializer) PerformDBCleanUp() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PerformDBCleanUp")
	ret0, _ := ret[0].(error)
	return ret0
}

// PerformDBCleanUp indicates an expected call of PerformDBCleanUp
func (mr *MockInitializerMockRecorder) PerformDBCleanUp() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PerformDBCleanUp", reflect.TypeOf((*MockInitializer)(nil).PerformDBCleanUp))
}
